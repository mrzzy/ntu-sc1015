{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mrzzy/ntu-sc1015/blob/main/feat(model)%3A%20add%20xgboost%2C%20randomforest%20models%20%26%20review%20count%20feature\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ML Modeling: Business Closure Prediction\n",
        "Objective: Train a Machine Learning (ML) model to predict whether an Yelp business will close:\n",
        "- Problem: **Binary Classification** Predict whether the Yelp business is labeled as _open_ or _closed_.\n",
        "- Evaluation Metric: F1-Score,\n",
        "- Dataset: [Yelp Dataset](https://www.yelp.com/dataset)"
      ],
      "metadata": {
        "id": "HoIG3_zMRcto"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from typing import Generic\n",
        "from sklearn.base import BaseEstimator, ClassifierMixin, TransformerMixin\n",
        "from imblearn.pipeline import Pipeline\n",
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import StandardScaler, FunctionTransformer\n",
        "from sklearn.model_selection import train_test_split, cross_validate\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "\n",
        "sns.set_theme()"
      ],
      "metadata": {
        "id": "v7z-EVkGWIrB"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prepare Dataset"
      ],
      "metadata": {
        "id": "uobjuwQ6KjkY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Load Dataset\n",
        "Load prepared Yelp Dataset"
      ],
      "metadata": {
        "id": "Zaa22l5vLFtn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df = pd.read_parquet(\"https://ntu-sc1015-yelp.s3.ap-southeast-1.amazonaws.com/yelp_reviews.parquet/part-00000-tid-666118639932506010-9f727aa9-11e6-466d-9314-69664704543d-2119-1-c000.snappy.parquet\")"
      ],
      "metadata": {
        "id": "u8rAOKE6KllC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Regroup Data\n",
        "Cardinality of `reviews_df` is at the _reviews level_. We are specfically interested in business features at the _business level_.\n",
        "\n",
        "Regroup data to the _business level_ and extract business features:\n"
      ],
      "metadata": {
        "id": "a29yprTxVfW4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "business_cols = reviews_df.columns[reviews_df.columns.str.startswith(\"business_\")]\n",
        "review_counts = reviews_df.groupby(\"business_id\")[\"review_id\"].count()\n",
        "business_df = reviews_df[business_cols].groupby(\"business_id\").first()\n",
        "business_df[\"n_reviews\"]  = review_counts"
      ],
      "metadata": {
        "id": "lKnj4B05WfNV"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Target Variable\n",
        "Given Yelp dataset features, we are trying to whether `business_is_open`:\n",
        "- `0` This business has **closed**\n",
        "- `1` This business is still **open**.\n"
      ],
      "metadata": {
        "id": "HNFpUOjxTxQF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "target = \"business_is_open\"\n",
        "targets = business_df[target]\n",
        "features = business_df.columns[business_df.columns != target]\n",
        "feature_df = business_df[features]"
      ],
      "metadata": {
        "id": "o0pwEOlqUTMJ"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Split Dataset\n",
        "Split dataset into train and test subsets using stratified random sampling to ensure consistent target distribution on train / test subsets."
      ],
      "metadata": {
        "id": "QeSW-IJqdM1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_feature_df, test_feature_df, train_targets, test_targets = train_test_split(\n",
        "    feature_df, targets, test_size=0.2, random_state=42, stratify=targets)"
      ],
      "metadata": {
        "id": "YZS9VCB_dRXD"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Transform for ML\n",
        "Apply transformations to data to convert it into a form suitable for Machine Learning."
      ],
      "metadata": {
        "id": "CAtP2iZtLuVm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Target: Business Is Open\n",
        "Observed that our target `business_is_open` is heavily skewed towards open (1)\n",
        "businesses.\n"
      ],
      "metadata": {
        "id": "gzempXlkQQvS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.title(\"business_is_open\")\n",
        "train_targets.value_counts().plot(kind=\"barh\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "id": "3df09oiaN7sQ",
        "outputId": "3cbb747f-1709-4f46-c530-c3e45e477ca9"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'business_is_open'}>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correct for the class imbalance by randomly **undersampling** the majority class\n",
        "to match no. of samples in the minority class.\n"
      ],
      "metadata": {
        "id": "NSG4zgaHQ61S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sampler = RandomUnderSampler(sampling_strategy=\"majority\", random_state=42)"
      ],
      "metadata": {
        "id": "EfnGRGDcSKGb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Business Rating\n",
        "`business_stars`\n",
        "- In Exploratory Data Analysis (EDA), we have observed that `business_stars` is right skewed, hence `np.exp2()` is applied to correct the skew.\n",
        "\n",
        "#### No. of Reviews\n",
        "`n_reviews`\n",
        "- EDA shows that a good indicator of whether a business will close is the no. of reviews recieved by the business. In particular, if the business recieves no reviews, its highly likely to close."
      ],
      "metadata": {
        "id": "NKtzfqIjKvYP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "transform = ColumnTransformer(\n",
        "  transformers=[\n",
        "    (\"business_stars\", Pipeline(steps=[\n",
        "        (\"unskew_exp2\", FunctionTransformer(np.exp2)),\n",
        "    ]), [\"business_stars\"]),\n",
        "    (\"passthrough\", \"passthrough\", [\"n_reviews\"]),\n",
        "  ]\n",
        ")"
      ],
      "metadata": {
        "id": "Cyc-QduvZGnb"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### All Features\n",
        "`StandardScaler` is applied to normalise feature values to a range suitable for ML models.\n"
      ],
      "metadata": {
        "id": "gFMnRf_sdKLJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()"
      ],
      "metadata": {
        "id": "mqZswTr-dM6E"
      },
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ML Modelling\n",
        "\n"
      ],
      "metadata": {
        "id": "44MgwS4SUhlu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ML Algorithms\n",
        "Models will be built from the following ML Algorithms:"
      ],
      "metadata": {
        "id": "DJPqzS4fU4u_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "models = [\n",
        "  LogisticRegression(),\n",
        "  RandomForestClassifier(),\n",
        "  XGBClassifier(),\n",
        "]"
      ],
      "metadata": {
        "id": "yFPlmVvfU0Q4"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation\n",
        "Model evaluation be performed on the following metrics:\n",
        "- F1-score: Harmonic Mean of Precision and Recall\n",
        "- Precision\n",
        "- Recall\n",
        "- Accuracy\n",
        "\n",
        "Do to the presence of class imbalance, F1-score is choosen over Accuracy as the _core metric_ to benchmark Models for Model Selection."
      ],
      "metadata": {
        "id": "p7SXLM8eg-Dj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "metrics = [\n",
        "  \"f1\",\n",
        "  \"precision\",\n",
        "  \"recall\",\n",
        "  \"accuracy\",\n",
        "]"
      ],
      "metadata": {
        "id": "23Y7rInZM9lg"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train & Evaluation Lifecycle\n",
        "Group data transformation, model training & evaluation steps into a single objective function:\n",
        "\n"
      ],
      "metadata": {
        "id": "LdytArvSMhBx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def train_eval(model: BaseEstimator, feature_df: pd.DataFrame, targets: pd.Series) -> pd.DataFrame:\n",
        "  # group data transform & model steps in single pipeline\n",
        "  pipeline = Pipeline(\n",
        "    steps=[\n",
        "      (\"sample_data\", sampler),\n",
        "      (\"transform_data\", transform),\n",
        "      (\"scale_data\", scaler),\n",
        "      (\"model\", model),\n",
        "    ]\n",
        "  )\n",
        "\n",
        "  # train & evaluate model with metrics\n",
        "  results = cross_validate(\n",
        "      estimator=pipeline,\n",
        "      X=feature_df,\n",
        "      y=targets,\n",
        "      scoring=metrics,\n",
        "      cv=5,\n",
        "      return_train_score=True,\n",
        "      # cross validate on all CPU cores\n",
        "      n_jobs=-1,\n",
        "  )\n",
        "\n",
        "  # rename \"test_\" columns to \"valid_\" to reflect that they are derieved from validation set\n",
        "  df = pd.DataFrame(results)\n",
        "  df.columns = df.columns.str.replace(\"test_\", \"valid_\")\n",
        "  df[\"pipeline\"] = str(pipeline)\n",
        "  df[\"model\"] = str(model)\n",
        "  return df\n"
      ],
      "metadata": {
        "id": "SKTLBuA5X5xS"
      },
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "results_df = pd.concat([train_eval(m, train_feature_df, train_targets) for m in models])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kw8tprRzaQje",
        "outputId": "fe51926b-7972-4f78-ee03-059b44c6d009"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 19 s, sys: 2.46 s, total: 21.5 s\n",
            "Wall time: 40.2 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results_df.groupby(\"model\")[\"valid_f1\"].mean()"
      ],
      "metadata": {
        "id": "680z5WlMM5Nn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "85944023-fd29-40e5-acb8-eac20e19c19b"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "model\n",
              "LogisticRegressionn",
              "RandomForestClassifiern",
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\\n              colsample_bylevel=None, colsample_bynode=None,\\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\\n              enable_categorical=False, eval_metric=None, feature_types=None,\\n              gamma=None, grow_policy=None, importance_type=None,\\n              interaction_constraints=None, learning_rate=None, max_bin=None,\\n              max_cat_threshold=None, max_cat_to_onehot=None,\\n              max_delta_step=None, max_depth=None, max_leaves=None,\\n              min_child_weight=None, missing=nan, monotone_constraints=None,\\n              multi_strategy=None, n_estimators=None, n_jobs=None,\\n              num_parallel_tree=None, random_state=None, ...)    0.613042\n",
              "Name: valid_f1, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    }
  ]
}